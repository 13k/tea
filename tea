#!/usr/bin/env python

import argparse
import copy
import os
import sys
from pathlib import Path

import yaml

YAML_EXT = 'yml'

TMUXP_DEFAULT_BIN = Path('tmuxp')
TMUXP_DEFAULT_CONFIG_DIR = Path.home().joinpath('.tmuxp')

TMUXP_BASE_SESSION_CONFIG = {
    'session_name':
    'session_name',
    'windows': [
        {
            'window_name': 'window_name',
            'start_directory': '$HOME',
            'focus': True,
            'layout': 'main-vertical',
            'options': {
                'main-pane-width': 130,
            },
            'panes': [
                {
                    'focus': True,
                },
                'blank',
                'blank',
            ],
        },
    ],
}


def patharg(must_exist=False, expand=False, return_raw=False):
    def validate_patharg(arg):
        raw = Path(arg)

        if expand:
            path = Path(os.path.expandvars(arg)).expanduser()
        else:
            path = raw

        if must_exist and not path.exists():
            err = f"Path {path} doesn't exist"
            raise argparse.ArgumentTypeError(err)

        return raw if return_raw else path

    return validate_patharg


def main():
    parser = argparse.ArgumentParser(
        description='''Control tmux (with tmuxp)''')

    parser.add_argument(
        '-t',
        '--tmuxp',
        type=patharg,
        default=TMUXP_DEFAULT_BIN,
        help='''tmuxp executable path (default: %(default)s)''')

    parser.add_argument(
        '-c',
        '--config-dir',
        type=patharg(must_exist=True),
        default=TMUXP_DEFAULT_CONFIG_DIR,
        help='''tmuxp config path (default: %(default)s)''')

    parser.add_argument(
        '-g',
        '--generate',
        action='store_true',
        default=False,
        help=
        '''Generate a tmuxp session configuration for a project (default: %(default)s)'''
    )

    parser.add_argument(
        '-d',
        '--directory',
        type=patharg(must_exist=True, expand=True, return_raw=True),
        default=Path.cwd(),
        help='''Project directory (default: %(default)s)''')

    parser.add_argument(
        '-f',
        '--force',
        action='store_true',
        default=False,
        help='''Force execution (overwrite files, etc. default: %(default)s)'''
    )

    parser.add_argument(
        'name', metavar='NAME', help='''Act on project/session NAME''')

    args = parser.parse_args()

    if args.generate:
        return generate(args)

    return load(args)


def load(args):
    os.execlp(args.tmuxp, 'tmuxp', 'load', args.name)


def generate(args):
    output_name = f'{args.name}.{YAML_EXT}'
    output_path = args.config_dir.joinpath(output_name)

    if output_path.exists() and not args.force:
        print(
            f'Session configuration {args.name} [{output_path}] already exists'
        )
        return 1

    config = copy.deepcopy(TMUXP_BASE_SESSION_CONFIG)
    config['session_name'] = args.name
    config['windows'][0].update(
        window_name=args.name, start_directory=str(args.directory))

    with output_path.open('w') as f:
        yaml.dump(config, f, default_flow_style=False)

    print(f'Saved session configuration to {output_path}')
    return 0


if __name__ == '__main__':
    sys.exit(main() or 0)
